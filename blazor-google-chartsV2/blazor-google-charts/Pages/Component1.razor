@page "/FileImport2"
@inject IJSRuntime JsRuntime

<div class="container bg-white mx-auto text-center p-5">
    <div class="display-6">Google Charts with Blazor</div>


    <div class="d-inline-block m-4">
        <button class="btn btn-primary" @onclick="() => PlotRandomXY(yyData)">RandomXY</button>

    </div>


    <div>
        <textarea @bind="Description" @onclick="() => PlotRandomXY(yyData)" />
    </div>


    <div class="d-inline-block m-4">
        <Microsoft.AspNetCore.Components.Forms.InputFile OnChange="@OnInputFileChanged"> id="flpicker" </Microsoft.AspNetCore.Components.Forms.InputFile>
    </div>
</div>




@code{

    public string value;
    int filesize;
    public string ProfilePicDataUrl { get; set; }
    string dataFromFile;
    List<double> filteredData;
    public static double[] yyData { get; set; } = { 0, 0, 0 };
    public string Description { get; set; } = "nothing here";
    public double[] filteredDataArray { get; set; }

    List<double> cleanDataX = new List<double>();
    List<double> cleanDataY = new List<double>();
    List<string> cleanText = new List<string>();



    private void PlotWalk()
    {

        Description = yyData[1].ToString();
    }

    private void PlotRandomXY(double[] yData)
    {
        foreach (double item in yData)
        {
            Description = Description + item.ToString() + "\n";
        }


    }




    private async Task OnInputFileChanged(InputFileChangeEventArgs inputFileChangeEvent)
    {
        var file = inputFileChangeEvent.File;

        var buffer = new byte[file.Size];
        await file.OpenReadStream().ReadAsync(buffer);


        dataFromFile = System.Text.Encoding.UTF8.GetString(buffer);

        filteredData = FilterDataThermo(dataFromFile);

        filteredDataArray = filteredData.ToArray();
        yyData = filteredDataArray;
        Description = yyData[1].ToString();

    }



    private List<double> FilterDataNoran(string rawData)
    {
        string[] rawDataArray = rawData.Split("\n");

        string[] splitData = new string[rawDataArray.Length];
        //double[] cleanData = new double[];

        int i = 0;
        bool spectrum = false;

        foreach (var data in rawDataArray)
        {
            var dataCleaned = data.Trim(new Char[] { ' ', '\n', '\r', '\'' });
            if (dataCleaned.Contains("#SPECTRUM"))
            {
                spectrum = true;
            }
            else if (spectrum) //prvni prebeh nefunguje
            {
                var dataCleanedSpectrum = dataCleaned.Split(",");
                i = 0;
                bool isDoubleX = double.TryParse(dataCleanedSpectrum[i], out double doubleElementX);
                bool isDoubleY = double.TryParse(dataCleanedSpectrum[i + 1], out double doubleElementY);
                if (isDoubleX & isDoubleY)
                {
                    cleanDataX.Add(doubleElementX);
                    cleanDataY.Add(doubleElementY);
                }
            }
            else
            {
                cleanText.Add(dataCleaned);
            }
        }

        foreach (double item in cleanDataY)
        {
            Description = Description + item.ToString() + "\n";
        }

        return cleanDataY;
    }



    private List<double> FilterDataThermo(string rawData)
    {
        string[] rawDataArray = rawData.Split(";");

        string[] splitData = new string[rawDataArray.Length];
        List<double> cleanData = new List<double>();
        List<string> cleanText = new List<string>();

        foreach (var data in rawDataArray)
        {
            var dataCleaned = data.Trim(new Char[] { ' ', '\n', '\r', '\'' });
            bool isDouble = double.TryParse(dataCleaned, out double doubleElement);
            if (isDouble)
            {
                cleanData.Add(doubleElement);
            }
            else
            {
                cleanText.Add(dataCleaned);
            }
        }
        return cleanData;
    }


}